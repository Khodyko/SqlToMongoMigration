<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mongo="http://www.springframework.org/schema/data/mongo"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/data/mongo
          http://www.springframework.org/schema/data/mongo/spring-mongo.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/tx
     http://www.springframework.org/schema/tx/spring-tx.xsd
     http://www.springframework.org/schema/aop
     https://www.springframework.org/schema/aop/spring-aop.xsd">
    <context:annotation-config/>
    <aop:config>
        <aop:pointcut id="fooServiceOperation" expression="execution(* org.example.spring.service.serviceImpl.sqlToMongoMigrationService.SqlToMongoMigrationService.getSqlData())"/>
        <aop:advisor  advice-ref="txAdvice" pointcut-ref="fooServiceOperation" />
    </aop:config>
    <!--TransactionSQL-->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="DataSource" ref="DataSource"/>
    </bean>
    <tx:advice id="txAdvice" transaction-manager="txManager" >
        <!-- the transactional semantics... -->
        <tx:attributes>
            <!-- all methods starting with 'get' are read-only -->
            <tx:method name="get*" read-only="true" />
<!--             other methods use the default transaction settings (see below) -->
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>


    <!--TransactionMongo-->
    <bean id="mongoTxManager" class="org.springframework.data.mongodb.MongoTransactionManager">
        <property name="dbFactory" ref="mongoDbFactory"/>
    </bean>
    <tx:advice id="mongoTxAdvice" transaction-manager="mongoTxManager">
        <!-- the transactional semantics... -->
        <tx:attributes>
            <!-- other methods use the default transaction settings (see below) -->
            <tx:method name="migrateDataToMongo"/>
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:advisor advice-ref="mongoTxAdvice" pointcut-ref="fooServiceOperation" />
    </aop:config>
    <!--    MYSQL-->
    <bean id="DataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <!-- results in a setDriverClassName(String) call -->
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost/ticketapp?useSSL=false"/>
        <property name="username" value="root"/>
        <property name="password" value="root"/>
<!--        <property name="initialSize" value="5"></property>-->
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="DataSource" ref="DataSource"></property>
    </bean>

    <bean id="eventSqlDaoImpl" class="org.example.spring.dao.sqlDaoImpl.EventSqlDaoImpl">
        <constructor-arg ref="jdbcTemplate"/>
    </bean>
    <bean id="userSqlDaoImpl" class="org.example.spring.dao.sqlDaoImpl.UserSqlDaoImpl">
        <constructor-arg ref="jdbcTemplate"/>
    </bean>
    <bean id="ticketSqlDaoImpl" class="org.example.spring.dao.sqlDaoImpl.TicketSQLDaoImpl">
        <constructor-arg ref="jdbcTemplate"/>
    </bean>
    <!--    mongo-->
    <mongo:mongo-client host="localhost" port="27017" id="mongoClient"/>
    <mongo:db-factory dbname="mongoTest" mongo-client-ref="mongoClient" id="mongoDbFactory"/>

    <bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
        <constructor-arg name="mongoDbFactory" ref="mongoDbFactory"/>
    </bean>

    <bean class=
                  "org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>

    <mongo:repositories
            base-package="org.example.spring.dao.mongoDaoImpl" mongo-template-ref="mongoTemplate"/>

    <bean id="eventMongoDaoImpl" class="org.example.spring.dao.mongoDaoImpl.EventMongoDaoImpl">
        <constructor-arg ref="mongoTemplate"/>
    </bean>
    <bean id="userMongoDaoImpl" class="org.example.spring.dao.mongoDaoImpl.UserMongoDaoImpl">
        <constructor-arg ref="mongoTemplate"/>
    </bean>
    <bean id="ticketMongoDaoImpl" class="org.example.spring.dao.mongoDaoImpl.TicketMongoDaoImpl">
        <constructor-arg ref="mongoTemplate"/>
    </bean>

    <bean id="booking"
          class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
        <property name="properties">
            <value>
                event.file.path=src/main/resources/event_data.json
                ticket.file.path=src/main/resources/ticket_data.json
                user.file.path=src/main/resources/user_data.json
            </value>
        </property>
    </bean>


    <bean id="storage" class="org.example.spring.Storage" init-method="initMethod">
        <property name="jsonReader" ref="jsonReader"/>
    </bean>
    <bean id="validatorDao" class="org.example.spring.dao.daoImpl.ValidatorDao"></bean>
    <bean id="jsonReader" class="org.example.spring.JsonReader"/>
    <bean id="eventServiceImpl" class="org.example.spring.service.serviceImpl.EventServiceImpl" autowire="byName"/>
    <bean id="userServiceImpl" class="org.example.spring.service.serviceImpl.UserServiceImpl" autowire="byName"/>
    <bean id="ticketServiceImpl" class="org.example.spring.service.serviceImpl.TicketServiceImpl" autowire="byName"/>
    <bean id="eventDaoImpl" class="org.example.spring.dao.daoImpl.EventDaoImpl">
        <property name="storage" ref="storage"/>
        <property name="validatorDao" ref="validatorDao"/>
    </bean>
    <bean id="userDaoImpl" class="org.example.spring.dao.daoImpl.UserDaoImpl">
        <property name="storage" ref="storage"/>
        <property name="validatorDao" ref="validatorDao"/>
    </bean>
    <bean id="ticketDaoImpl" class="org.example.spring.dao.daoImpl.TicketDaoImpl">
        <property name="storage" ref="storage"/>
        <property name="validatorDao" ref="validatorDao"/>
    </bean>

    <bean id="facadeImpl" class="org.example.spring.facade.FacadeImpl">
        <constructor-arg ref="eventServiceImpl"/>
        <constructor-arg ref="userServiceImpl"/>
        <constructor-arg ref="ticketServiceImpl"/>
    </bean>

    <bean id="mongoConverter" class="org.example.spring.converter.MongoEntityConverter"/>
    <bean id="sqlToMongoMigrationService" class="org.example.spring.service.serviceImpl.sqlToMongoMigrationService.SqlToMongoMigrationService">
        <constructor-arg ref="eventMongoDaoImpl"/>
        <constructor-arg ref="userMongoDaoImpl"/>
        <constructor-arg ref="ticketMongoDaoImpl"/>
        <constructor-arg ref="eventSqlDaoImpl"/>
        <constructor-arg ref="userSqlDaoImpl"/>
        <constructor-arg ref="ticketSqlDaoImpl"/>
        <constructor-arg ref="mongoConverter"/>
    </bean>
</beans>